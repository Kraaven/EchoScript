.global{
    num size = 0;
    num i = 0;
    num j = 0;
    num temp = 0;
    num swapped = 0;
    num innerLimit = 0;
    str indexStr = "";
    str nextIndexStr = "";
    str outputStr = "";
    str elementStr = "";
    str promptStr = "";
}

.main{
    call : getSize;
    call : getElements;
    call : printInitial;
    call : bubbleSort;
    call : printFinal;
}

.getSize{
    sys-console = "Enter number of elements (max 20): ";
    syscall : write;
    syscall : read;
    STR-i = sys-console;
    syscall : toNum;
    size = NUM-i;
    
    NUM-i = size;
    STR-i = "num";
    STR-x = "arr";
    syscall : arr;
}

.getElements{
    i = 0;
    while i < size : inputElement;
}

.inputElement{
    # Create prompt with element index #
    NUM-i = i;
    syscall : toString;
    promptStr = "Enter element " + STR-i + ": ";
    sys-console = promptStr;
    syscall : write;
    
    syscall : read;
    STR-i = sys-console;
    syscall : toNum;
    
    # Create dynamic array index string #
    NUM-i = i;
    syscall : toString;
    indexStr = "arr_" + STR-i;
    
    # Store element using pointer #
    STR-i = sys-console;
    syscall : toNum;
    $indexStr = NUM-i;
    
    i = i + 1;
}

.printInitial{
    outputStr = "Initial array: [";
    i = 0;
    while i < size : buildInitialString;
    outputStr = outputStr + "]";
    sys-console = outputStr;
    syscall : write;
}

.buildInitialString{
    # Get element value #
    NUM-i = i;
    syscall : toString;
    indexStr = "arr_" + STR-i;
    NUM-i = $indexStr;
    syscall : toString;
    elementStr = STR-i;
    
    # Add to output string with proper formatting #
    if i == 0 : addFirstElement | addCommaElement;
}

.addFirstElement{
    outputStr = outputStr + elementStr;
    i = i + 1;
}

.addCommaElement{
    outputStr = outputStr + ", " + elementStr;
    i = i + 1;
}

.bubbleSort{
    i = 0;
    while i < size : outerLoop;
}

.outerLoop{
    j = 0;
    swapped = 0;
    
    # Calculate inner loop limit: size - i - 1 #
    innerLimit = size - i - 1;
    
    while j < innerLimit : innerLoop;
    
    # Early termination if no swaps occurred #
    if swapped == 0 : sortComplete | continueSort;
}

.sortComplete{
    # Exit outer loop by setting i to size #
    i = size;
}

.continueSort{
    i = i + 1;
}

.innerLoop{
    call : compareAndSwap;
    j = j + 1;
}

.compareAndSwap{
    # Get arr[j] #
    NUM-i = j;
    syscall : toString;
    indexStr = "arr_" + STR-i;
    num currentVal = $indexStr;
    
    # Get arr[j+1] #
    temp = j + 1;
    NUM-i = temp;
    syscall : toString;
    nextIndexStr = "arr_" + STR-i;
    num nextVal = $nextIndexStr;
    
    # Compare and swap if needed #
    if currentVal > nextVal : performSwap | pass;
}

.performSwap{
    # Store current element in temp #
    NUM-i = j;
    syscall : toString;
    indexStr = "arr_" + STR-i;
    temp = $indexStr;
    
    # Get next element value #
    num jPlusOne = j + 1;
    NUM-i = jPlusOne;
    syscall : toString;
    nextIndexStr = "arr_" + STR-i;
    num nextVal = $nextIndexStr;
    
    # Perform the swap #
    $indexStr = nextVal;
    $nextIndexStr = temp;
    
    swapped = 1;
}

.printFinal{
    outputStr = "Sorted array:  [";
    i = 0;
    while i < size : buildFinalString;
    outputStr = outputStr + "]";
    sys-console = outputStr;
    syscall : write;
}

.buildFinalString{
    # Get element value #
    NUM-i = i;
    syscall : toString;
    indexStr = "arr_" + STR-i;
    NUM-i = $indexStr;
    syscall : toString;
    elementStr = STR-i;
    
    # Add to output string with proper formatting #
    if i == 0 : addFirstFinal | addCommaFinal;
}

.addFirstFinal{
    outputStr = outputStr + elementStr;
    i = i + 1;
}

.addCommaFinal{
    outputStr = outputStr + ", " + elementStr;
    i = i + 1;
}