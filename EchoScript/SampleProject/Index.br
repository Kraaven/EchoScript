
# Bubble Sort Implementation in Birch #
# This program creates an array, fills it with sample data, and sorts it using bubble sort #

.main{
    # Create the array #
    call : createArray;
    
    # Fill array with sample data #
    call : fillArray;
    
    # Display original array #
    sys-console = "Original array:";
    syscall : write;
    call : displayArray;
    
    # Sort the array #
    call : bubbleSort;
    
    # Display sorted array #
    sys-console = "Sorted array:";
    syscall : write;
    call : displayArray;
}

.createArray{
    # Set up array creation parameters #
    STR-i = num;           # Array type #
    STR-x = sortArray;     # Array name #
    NUM-i = 5;             # Array size #
    syscall : arr;         # Create the array #
}

.fillArray{
    # Fill array with sample values: 64, 34, 25, 12, 90 #
    sortArray_0 = 64;
    sortArray_1 = 34;
    sortArray_2 = 25;
    sortArray_3 = 12;
    sortArray_4 = 90;
}

.displayArray{
    # Display all array elements #
    NUM-i = sortArray_0;
    syscall : toString;
    sys-console = STR-i + " ";
    syscall : write;
    
    NUM-i = sortArray_1;
    syscall : toString;
    sys-console = STR-i + " ";
    syscall : write;
    
    NUM-i = sortArray_2;
    syscall : toString;
    sys-console = STR-i + " ";
    syscall : write;
    
    NUM-i = sortArray_3;
    syscall : toString;
    sys-console = STR-i + " ";
    syscall : write;
    
    NUM-i = sortArray_4;
    syscall : toString;
    sys-console = STR-i;
    syscall : write;
    
    sys-console = " ";
    syscall : write;
}

.bubbleSort{
    # Initialize loop counters using system variables #
    NUM-i = 0;  # Outer loop counter #
    while NUM-i < 4 : outerLoopBody;
}

.outerLoopBody{
    # Inner loop for each pass #
    NUM-x = 0;  # Inner loop counter #
    NUM-c = 1;  # Swapped flag #
    while NUM-x < 4 : innerLoopBody;
    
    # Increment outer counter and continue #
    NUM-i = NUM-i + 1;
}

.innerLoopBody{
    # Compare adjacent elements and swap if needed #
    if NUM-x == 0 : compareZeroOne | checkNextPair;
}

.checkNextPair{
    if NUM-x == 1 : compareOneTwo | checkNextPair2;
}

.checkNextPair2{
    if NUM-x == 2 : compareTwoThree | checkNextPair3;
}

.checkNextPair3{
    if NUM-x == 3 : compareThreeFour | incrementInner;
}

.compareZeroOne{
    if sortArray_0 > sortArray_1 : swapZeroOne | incrementInner;
}

.compareOneTwo{
    if sortArray_1 > sortArray_2 : swapOneTwo | incrementInner;
}

.compareTwoThree{
    if sortArray_2 > sortArray_3 : swapTwoThree | incrementInner;
}

.compareThreeFour{
    if sortArray_3 > sortArray_4 : swapThreeFour | incrementInner;
}

.swapZeroOne{
    NUM-l = sortArray_0;
    sortArray_0 = sortArray_1;
    sortArray_1 = NUM-l;
    call : incrementInner;
}

.swapOneTwo{
    NUM-l = sortArray_1;
    sortArray_1 = sortArray_2;
    sortArray_2 = NUM-l;
    call : incrementInner;
}

.swapTwoThree{
    NUM-l = sortArray_2;
    sortArray_2 = sortArray_3;
    sortArray_3 = NUM-l;
    call : incrementInner;
}

.swapThreeFour{
    NUM-l = sortArray_3;
    sortArray_3 = sortArray_4;
    sortArray_4 = NUM-l;
    call : incrementInner;
}

.incrementInner{
    NUM-x = NUM-x + 1;
}
